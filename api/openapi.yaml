openapi: 3.0.3
info:
  title: Ecommerce Website API
  description: |
    A comprehensive ecommerce API that provides functionality for user authentication, 
    product catalog management, shopping cart operations, order processing, and user profile management.
    
    ## Authentication
    Most endpoints require JWT authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Response Format
    All API responses follow a consistent format:
    - Success responses include `success: true`, optional `message`, `data`, and `timestamp`
    - Error responses include `success: false`, `error` object with `code`, `message`, and optional `details`, and `timestamp`
  version: 1.0.0
  contact:
    name: API Support
    email: support@ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.ecommerce.com
    description: Production server

security:
  - BearerAuth: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "Ecommerce API is running"
                data:
                  status: "ok"
                  database: "connected"
                  redis: "connected"
                timestamp: "2024-01-01T12:00:00Z"

  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/UserExistsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns JWT tokens
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          tokens:
                            $ref: '#/components/schemas/TokenPair'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/admin/login:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Authenticates an admin using environment credentials and returns JWT tokens
      operationId: adminLogin
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          tokens:
                            $ref: '#/components/schemas/TokenPair'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/InvalidCredentialsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generates new access and refresh tokens using a valid refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          tokens:
                            $ref: '#/components/schemas/TokenPair'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/InvalidTokenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logs out the user (client-side token removal)
      operationId: logoutUser
      security: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Returns the authenticated user's information
      operationId: getCurrentUser
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Sends password reset instructions to the user's email
      operationId: forgotPassword
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Resets user password using a valid reset token
      operationId: resetPassword
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/verify-email:
    get:
      tags:
        - Authentication
      summary: Verify email address
      description: Verifies user email using verification token
      operationId: verifyEmail
      security: []
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend email verification
      description: Resends email verification to the authenticated user
      operationId: resendEmailVerification
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Product Endpoints
  /api/products:
    get:
      tags:
        - Products
      summary: Get products with filtering and pagination
      description: Retrieves a paginated list of products with optional filtering and sorting
      operationId: getProducts
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: category_id
          in: query
          schema:
            type: string
          description: Filter by category ID
        - name: min_price
          in: query
          schema:
            type: number
            minimum: 0
          description: Minimum price filter
        - name: max_price
          in: query
          schema:
            type: number
            minimum: 0
          description: Maximum price filter
        - name: in_stock
          in: query
          schema:
            type: boolean
          description: Filter by stock availability
        - name: search
          in: query
          schema:
            type: string
          description: Search term for product name or description
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [name, price, created_at, updated_at]
            default: created_at
          description: Field to sort by
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ProductListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/products/search:
    get:
      tags:
        - Products
      summary: Search products
      description: Search products by query string
      operationId: searchProducts
      security: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ProductListResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieves a specific product by its ID
      operationId: getProductById
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/ProductNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Category Endpoints
  /api/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieves all product categories
      operationId: getCategories
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/Category'
                          total:
                            type: integer
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Categories
      summary: Create a new category
      description: Creates a new product category (admin only)
      operationId: createCategory
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/CategoryExistsError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieves a specific category by its ID
      operationId: getCategoryById
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Category ID
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/CategoryNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # User Profile Endpoints
  /api/users/profile:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieves the authenticated user's profile information
      operationId: getUserProfile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Updates the authenticated user's profile information
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/orders:
    get:
      tags:
        - User Profile
      summary: Get user order history
      description: Retrieves the authenticated user's order history
      operationId: getUserOrders
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Address Management Endpoints
  /api/users/addresses:
    get:
      tags:
        - Address Management
      summary: Get user addresses
      description: Retrieves all addresses for the authenticated user
      responses:
        '200':
          description: Addresses retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Address Management
      summary: Create new address
      description: Creates a new address for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddressRequest'
      responses:
        '201':
          description: Address created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/UserNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/users/addresses/{id}:
    get:
      tags:
        - Address Management
      summary: Get address by ID
      description: Retrieves a specific address for the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        '200':
          description: Address retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/AddressNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Address Management
      summary: Update address
      description: Updates a specific address for the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Address ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
      responses:
        '200':
          description: Address updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Address'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/AddressNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Address Management
      summary: Delete address
      description: Deletes a specific address for the authenticated user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Address ID
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/AddressNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Shopping Cart Endpoints
  /api/cart:
    get:
      tags:
        - Shopping Cart
      summary: Get shopping cart
      description: Retrieves the current shopping cart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/cart/items:
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      description: Adds an item to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemRequest'
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/ProductNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Shopping Cart
      summary: Update cart item
      description: Updates the quantity of an item in the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/ProductNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Shopping Cart
      summary: Remove item from cart
      description: Removes an item from the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveItemRequest'
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/cart/clear:
    delete:
      tags:
        - Shopping Cart
      summary: Clear shopping cart
      description: Removes all items from the shopping cart
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Cart'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Base Response Schemas
    SuccessResponse:
      type: object
      required:
        - success
        - timestamp
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        data:
          type: object
          description: Response data (varies by endpoint)
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    ErrorResponse:
      type: object
      required:
        - success
        - error
        - timestamp
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: '#/components/schemas/ErrorDetail'
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    ErrorDetail:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid request data"
        details:
          type: object
          description: Additional error details

    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "securepassword123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          example: "+1234567890"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "securepassword123"

    AdminLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "admin@ecommerce.com"
        password:
          type: string
          example: "admin123456"

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
      properties:
        token:
          type: string
          example: "reset-token-here"
        password:
          type: string
          minLength: 8
          example: "newsecurepassword123"

    TokenPair:
      type: object
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    # User Schemas
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - role
        - isActive
        - emailVerified
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        role:
          type: string
          enum: [customer, admin]
          example: "customer"
        isActive:
          type: boolean
          example: true
        emailVerified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'

    UpdateProfileRequest:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        phone:
          type: string
          nullable: true
          example: "+1234567890"

    # Address Schemas
    Address:
      type: object
      required:
        - id
        - userId
        - type
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
        - isDefault
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          enum: [shipping, billing]
          example: "shipping"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        company:
          type: string
          nullable: true
          example: "Acme Corp"
        address1:
          type: string
          example: "123 Main St"
        address2:
          type: string
          nullable: true
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        isDefault:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    CreateAddressRequest:
      type: object
      required:
        - type
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        type:
          type: string
          enum: [shipping, billing]
          example: "shipping"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        company:
          type: string
          nullable: true
          example: "Acme Corp"
        address1:
          type: string
          example: "123 Main St"
        address2:
          type: string
          nullable: true
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        isDefault:
          type: boolean
          example: false

    UpdateAddressRequest:
      type: object
      required:
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        company:
          type: string
          nullable: true
          example: "Acme Corp"
        address1:
          type: string
          example: "123 Main St"
        address2:
          type: string
          nullable: true
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        phone:
          type: string
          nullable: true
          example: "+1234567890"
        isDefault:
          type: boolean
          example: false

    # Product Schemas
    Product:
      type: object
      required:
        - id
        - name
        - price
        - sku
        - inventory
        - isActive
        - categoryId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        compareAtPrice:
          type: number
          format: float
          minimum: 0
          nullable: true
          example: 249.99
        sku:
          type: string
          example: "WH-001"
        inventory:
          type: integer
          minimum: 0
          example: 50
        isActive:
          type: boolean
          example: true
        categoryId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        images:
          type: array
          items:
            type: string
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        specifications:
          type: object
          additionalProperties: true
          example:
            color: "Black"
            weight: "250g"
            battery: "30 hours"
        seoTitle:
          type: string
          nullable: true
          example: "Best Wireless Headphones - Premium Audio"
        seoDescription:
          type: string
          nullable: true
          example: "Experience premium audio quality with our wireless headphones"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        category:
          $ref: '#/components/schemas/Category'

    ProductListResponse:
      type: object
      required:
        - products
        - pagination
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      required:
        - page
        - pageSize
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
          example: 1
        pageSize:
          type: integer
          minimum: 1
          example: 20
        total:
          type: integer
          minimum: 0
          example: 100
        totalPages:
          type: integer
          minimum: 0
          example: 5

    # Category Schemas
    Category:
      type: object
      required:
        - id
        - name
        - slug
        - isActive
        - sortOrder
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Electronics"
        slug:
          type: string
          example: "electronics"
        description:
          type: string
          nullable: true
          example: "Electronic devices and accessories"
        parentId:
          type: string
          format: uuid
          nullable: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        isActive:
          type: boolean
          example: true
        sortOrder:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        children:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        parent:
          $ref: '#/components/schemas/Category'

    CreateCategoryRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "Electronics"
        slug:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-z0-9-]+$'
          example: "electronics"
        description:
          type: string
          maxLength: 500
          example: "Electronic devices and accessories"
        parentId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        isActive:
          type: boolean
          default: true
          example: true
        sortOrder:
          type: integer
          default: 0
          example: 0

    # Order Schemas
    Order:
      type: object
      required:
        - id
        - userId
        - status
        - subtotal
        - tax
        - shipping
        - total
        - shippingAddress
        - billingAddress
        - paymentIntentId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          example: "pending"
        subtotal:
          type: number
          format: float
          minimum: 0
          example: 199.99
        tax:
          type: number
          format: float
          minimum: 0
          example: 20.00
        shipping:
          type: number
          format: float
          minimum: 0
          example: 10.00
        total:
          type: number
          format: float
          minimum: 0
          example: 229.99
        shippingAddress:
          $ref: '#/components/schemas/OrderAddress'
        billingAddress:
          $ref: '#/components/schemas/OrderAddress'
        paymentIntentId:
          type: string
          example: "pi_1234567890"
        notes:
          type: string
          nullable: true
          example: "Please deliver to the back door"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderAddress:
      type: object
      required:
        - firstName
        - lastName
        - address1
        - city
        - state
        - postalCode
        - country
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        company:
          type: string
          nullable: true
          example: "Acme Corp"
        address1:
          type: string
          example: "123 Main St"
        address2:
          type: string
          nullable: true
          example: "Apt 4B"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        postalCode:
          type: string
          example: "10001"
        country:
          type: string
          example: "US"
        phone:
          type: string
          nullable: true
          example: "+1234567890"

    OrderItem:
      type: object
      required:
        - id
        - orderId
        - productId
        - quantity
        - price
        - total
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        orderId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        quantity:
          type: integer
          minimum: 1
          example: 2
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        total:
          type: number
          format: float
          minimum: 0
          example: 399.98
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        product:
          $ref: '#/components/schemas/Product'

    # Cart Schemas
    Cart:
      type: object
      required:
        - sessionId
        - items
        - subtotal
        - tax
        - total
        - createdAt
        - updatedAt
      properties:
        sessionId:
          type: string
          example: "sess_1234567890"
        userId:
          type: string
          format: uuid
          nullable: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        subtotal:
          type: number
          format: float
          minimum: 0
          example: 199.99
        tax:
          type: number
          format: float
          minimum: 0
          example: 0.00
        total:
          type: number
          format: float
          minimum: 0
          example: 199.99
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"

    CartItem:
      type: object
      required:
        - productId
        - quantity
        - price
        - total
      properties:
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        quantity:
          type: integer
          minimum: 1
          example: 2
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        total:
          type: number
          format: float
          minimum: 0
          example: 399.98
        product:
          $ref: '#/components/schemas/Product'

    AddItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        quantity:
          type: integer
          minimum: 1
          example: 2

    UpdateItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        quantity:
          type: integer
          minimum: 0
          example: 3

    RemoveItemRequest:
      type: object
      required:
        - productId
      properties:
        productId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"

  responses:
    # Common Error Responses
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid request data"
              details: "Email is required"
            timestamp: "2024-01-01T12:00:00Z"

    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"
            timestamp: "2024-01-01T12:00:00Z"

    ForbiddenError:
      description: Forbidden access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INSUFFICIENT_PERMISSIONS"
              message: "Access denied: insufficient permissions"
            timestamp: "2024-01-01T12:00:00Z"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INTERNAL_ERROR"
              message: "An unexpected error occurred"
            timestamp: "2024-01-01T12:00:00Z"

    # Specific Error Responses
    UserExistsError:
      description: User already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "USER_EXISTS"
              message: "User with this email already exists"
            timestamp: "2024-01-01T12:00:00Z"

    InvalidCredentialsError:
      description: Invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INVALID_CREDENTIALS"
              message: "Invalid email or password"
            timestamp: "2024-01-01T12:00:00Z"

    InvalidTokenError:
      description: Invalid or expired token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INVALID_TOKEN"
              message: "Invalid or expired token"
            timestamp: "2024-01-01T12:00:00Z"

    UserNotFoundError:
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "USER_NOT_FOUND"
              message: "User not found"
            timestamp: "2024-01-01T12:00:00Z"

    ProductNotFoundError:
      description: Product not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "PRODUCT_NOT_FOUND"
              message: "Product not found"
            timestamp: "2024-01-01T12:00:00Z"

    CategoryNotFoundError:
      description: Category not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "CATEGORY_NOT_FOUND"
              message: "Category not found"
            timestamp: "2024-01-01T12:00:00Z"

    CategoryExistsError:
      description: Category already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "CATEGORY_EXISTS"
              message: "Category with this slug already exists"
            timestamp: "2024-01-01T12:00:00Z"

    AddressNotFoundError:
      description: Address not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "ADDRESS_NOT_FOUND"
              message: "Address not found"
            timestamp: "2024-01-01T12:00:00Z"

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Products
    description: Product catalog management
  - name: Categories
    description: Product category management
  - name: User Profile
    description: User profile management
  - name: Address Management
    description: User address management
  - name: Shopping Cart
    description: Shopping cart operations